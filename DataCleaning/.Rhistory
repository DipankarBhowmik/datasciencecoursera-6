setwd("~/GitHub/datasciencecoursera/Getting-Cleaning-Data-Assignment")
save.image("~/GitHub/datasciencecoursera/Getting-Cleaning-Data-Assignment/R.RData")
setwd("~/GitHub/datasciencecoursera/Getting-Cleaning-Data-Assignment")
trainSubject <- read.table("./UCI-HAR-Dataset/train/subject_train.txt")
y_test <- read.table("~/GitHub/datasciencecoursera/Getting-Cleaning-Data-Assignment/UCI HAR Dataset/test/y_test.txt", quote="\"", comment.char="")
View(y_test)
`getdata%2Fprojectfiles%2FUCI.HAR.Dataset` <- read.csv("C:/Users/Afifi/Downloads/getdata%2Fprojectfiles%2FUCI HAR Dataset.zip", sep="")
View(`getdata%2Fprojectfiles%2FUCI.HAR.Dataset`)
View(y_test)
`getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset` <- read.csv("C:\\Users\\Afifi\\AppData\\Local\\Temp\\Rtmp6bhQN8\\data1bb421ad6b58", sep="")
View(`getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset`)
load("~/GitHub/datasciencecoursera/Getting-Cleaning-Data-Assignment/R.RData")
trainSubject <- read.table("./UCI-HAR-Dataset/train/subject_train.txt")
trainSubject <- read.table("./UCI-HAR-Dataset/train/subject_train.txt")
trainSubject <- read.table("./UCI-HAR-Dataset/train/subject_train.txt")
source('~/GitHub/datasciencecoursera/Getting-Cleaning-Data-Assignment/run_analysis.R')
source('~/GitHub/datasciencecoursera/Getting-Cleaning-Data-Assignment/run_analysis.R')
setwd("~/GitHub/datasciencecoursera/Getting-Cleaning-Data-Assignment")
source('~/GitHub/datasciencecoursera/Getting-Cleaning-Data-Assignment/run_analysis.R')
#setwd("~/GitHub/datasciencecoursera/Getting-Cleaning-Data-Assignment")
#1. Merges the training and the test sets to create one data set.
trainData <- read.table("./UCI-HAR-Dataset/train/X_train.txt")
trainLabel <- read.table("./UCI-HAR-Dataset/train/y_train.txt")
trainSubject <- read.table("./UCI-HAR-Dataset/train/subject_train.txt")
trainSubject <- read.table("./UCI-HAR-Dataset/train/subject_train.txt")
trainSubject <- read.table("./UCI-HAR-Dataset/train/subject_train.txt")
trainData <- read.table("./UCI-HAR-Dataset/train/X_train.txt")
trainLabel <- read.table("./UCI-HAR-Dataset/train/y_train.txt")
trainSubject <- read.table("./UCI-HAR-Dataset/train/subject_train.txt")
table(trainLabel)
testData <- read.table("./UCI-HAR-Dataset/test/X_test.txt")
testLabel <- read.table("./UCI-HAR-Dataset/test/y_test.txt")
table(testLabel)
testSubject <- read.table("./UCI-HAR-Dataset/test/subject_test.txt")
joinData <- rbind(trainData, testData)
joinLabel <- rbind(trainLabel, testLabel)
joinSubject <- rbind(trainSubject, testSubject)
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("./UCI-HAR-Dataset/features.txt")
View(features)
meanStdIndices <- grep("mean\\(\\)|std\\(\\)", features[, 2])
#Test content of meanStdIndices
length(meanStdIndices)
joinData <- joinData[, meanStdIndices]
names(joinData) <- gsub("\\(\\)", "", features[meanStdIndices, 2]) # remove "()"
names(joinData) <- gsub("mean", "Mean", names(joinData)) # capitalize M
names(joinData) <- gsub("std", "Std", names(joinData)) # capitalize S
names(joinData) <- gsub("-", "", names(joinData)) # remove "-" in column names
#3. Uses descriptive activity names to name the activities in the data set
activity <- read.table("./UCI-HAR-Dataset/activity_labels.txt")
View(activity)
activity[, 2] <- tolower(gsub("_", "", activity[, 2]))
substr(activity[2, 2], 8, 8) <- toupper(substr(activity[2, 2], 8, 8))
substr(activity[3, 2], 8, 8) <- toupper(substr(activity[3, 2], 8, 8))
activityLabel <- activity[joinLabel[, 1], 2]
joinLabel[, 1] <- activityLabel
names(joinLabel) <- "activity"
#4. Appropriately labels the data set with descriptive activity names.
names(joinSubject) <- "subject"
cleanedData <- cbind(joinSubject, joinLabel, joinData)
View(cleanedData)
# write out the Merged dataset
write.table(cleanedData, "mergedData.txt")
#5. Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
subjectLen <- length(table(joinSubject)) # 30
activityLen <- dim(activity)[1] # 6
columnLen <- dim(cleanedData)[2]
result <- matrix(NA, nrow=subjectLen*activityLen, ncol=columnLen)
result <- as.data.frame(result)
colnames(result) <- colnames(cleanedData)
row <- 1
for(i in 1:subjectLen) {
for(j in 1:activityLen) {
result[row, 1] <- sort(unique(joinSubject)[, 1])[i]
result[row, 2] <- activity[j, 2]
bool1 <- i == cleanedData$subject
bool2 <- activity[j, 2] == cleanedData$activity
result[row, 3:columnLen] <- colMeans(cleanedData[bool1&bool2, 3:columnLen])
row <- row + 1
}
}
#Test output
head(result)
# write out the Tidy Dataset file.
write.table(result, "tidyDataWithMeans.txt", row.name=FALSE)
activityLabels <- read.table("UCI-HAR-Dataset/activity_labels.txt", header = FALSE)
featureNames <- read.table("UCI-HAR-Dataset/features.txt")
View(featureNames)
featureNames <- read.table("UCI HAR Dataset/features.txt")
featureNames <- read.table("UCI HAR Dataset/features.txt")
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header = FALSE)
subjectTrain <- read.table("UCI HAR Dataset/train/subject_train.txt", header = FALSE)
activityTrain <- read.table("UCI HAR Dataset/train/y_train.txt", header = FALSE)
featuresTrain <- read.table("UCI HAR Dataset/train/X_train.txt", header = FALSE)
subjectTest <- read.table("UCI HAR Dataset/test/subject_test.txt", header = FALSE)
activityTest <- read.table("UCI HAR Dataset/test/y_test.txt", header = FALSE)
featuresTest <- read.table("UCI HAR Dataset/test/X_test.txt", header = FALSE)
featureNames <- read.table("UCI HAR Dataset/features.txt")
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header = FALSE)
#Read training data
subjectTrain <- read.table("UCI HAR Dataset/train/subject_train.txt", header = FALSE)
activityTrain <- read.table("UCI HAR Dataset/train/y_train.txt", header = FALSE)
featuresTrain <- read.table("UCI HAR Dataset/train/X_train.txt", header = FALSE)
#Read test data
subjectTest <- read.table("UCI HAR Dataset/test/subject_test.txt", header = FALSE)
activityTest <- read.table("UCI HAR Dataset/test/y_test.txt", header = FALSE)
featuresTest <- read.table("UCI HAR Dataset/test/X_test.txt", header = FALSE)
#Part 1 - Merge the training and the test sets to create one data set
subject <- rbind(subjectTrain, subjectTest)
activity <- rbind(activityTrain, activityTest)
features <- rbind(featuresTrain, featuresTest)
#Naming the columns
#The columns in the features data set can be named from the metadata in featureNames
colnames(features) <- t(featureNames[2])
#Merge the data
#The data in features,activity and subject are merged and the complete data is now stored in completeData.
colnames(activity) <- "Activity"
colnames(subject) <- "Subject"
completeData <- cbind(features,activity,subject)
#Part 2 - Extracts only the measurements on the mean and standard deviation for each measurement
columnsWithMeanSTD <- grep(".*Mean.*|.*Std.*", names(completeData), ignore.case=TRUE)
requiredColumns <- c(columnsWithMeanSTD, 562, 563)
dim(completeData)
extractedData <- completeData[,requiredColumns]
dim(extractedData)
#Part 3 - Uses descriptive activity names to name the activities in the data set
extractedData$Activity <- as.character(extractedData$Activity)
for (i in 1:6){
extractedData$Activity[extractedData$Activity == i] <- as.character(activityLabels[i,2])
}
extractedData$Activity <- as.factor(extractedData$Activity)
#Part 4 - Appropriately labels the data set with descriptive variable names
names(extractedData)
#Part 5 - From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject
extractedData$Subject <- as.factor(extractedData$Subject)
extractedData <- data.table(extractedData)
tidyData <- aggregate(. ~Subject + Activity, extractedData, mean)
tidyData <- tidyData[order(tidyData$Subject,tidyData$Activity),]
write.table(tidyData, file = "Tidy.txt", row.names = FALSE)
library(data.table)
library(dplyr)
#Read Supporting Metadata.
#They are loaded into variables featureNames and activityLabels.
featureNames <- read.table("UCI HAR Dataset/features.txt")
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header = FALSE)
library(data.table)
library(dplyr)
#Read Supporting Metadata.
#They are loaded into variables featureNames and activityLabels.
featureNames <- read.table("UCI HAR Dataset/features.txt")
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header = FALSE)
#Read training data
subjectTrain <- read.table("UCI HAR Dataset/train/subject_train.txt", header = FALSE)
activityTrain <- read.table("UCI HAR Dataset/train/y_train.txt", header = FALSE)
featuresTrain <- read.table("UCI HAR Dataset/train/X_train.txt", header = FALSE)
#Read test data
subjectTest <- read.table("UCI HAR Dataset/test/subject_test.txt", header = FALSE)
activityTest <- read.table("UCI HAR Dataset/test/y_test.txt", header = FALSE)
featuresTest <- read.table("UCI HAR Dataset/test/X_test.txt", header = FALSE)
#Part 1 - Merge the training and the test sets to create one data set
subject <- rbind(subjectTrain, subjectTest)
activity <- rbind(activityTrain, activityTest)
features <- rbind(featuresTrain, featuresTest)
#Naming the columns
#The columns in the features data set can be named from the metadata in featureNames
colnames(features) <- t(featureNames[2])
#Merge the data
#The data in features,activity and subject are merged and the complete data is now stored in completeData.
colnames(activity) <- "Activity"
colnames(subject) <- "Subject"
completeData <- cbind(features,activity,subject)
#Part 2 - Extracts only the measurements on the mean and standard deviation for each measurement
columnsWithMeanSTD <- grep(".*Mean.*|.*Std.*", names(completeData), ignore.case=TRUE)
requiredColumns <- c(columnsWithMeanSTD, 562, 563)
dim(completeData)
extractedData <- completeData[,requiredColumns]
dim(extractedData)
#Part 3 - Uses descriptive activity names to name the activities in the data set
extractedData$Activity <- as.character(extractedData$Activity)
for (i in 1:6){
extractedData$Activity[extractedData$Activity == i] <- as.character(activityLabels[i,2])
}
extractedData$Activity <- as.factor(extractedData$Activity)
#Part 4 - Appropriately labels the data set with descriptive variable names
names(extractedData)
names(extractedData)<-gsub("Acc", "Accelerometer", names(extractedData))
names(extractedData)<-gsub("Gyro", "Gyroscope", names(extractedData))
names(extractedData)<-gsub("BodyBody", "Body", names(extractedData))
names(extractedData)<-gsub("Mag", "Magnitude", names(extractedData))
names(extractedData)<-gsub("^t", "Time", names(extractedData))
names(extractedData)<-gsub("^f", "Frequency", names(extractedData))
names(extractedData)<-gsub("tBody", "TimeBody", names(extractedData))
names(extractedData)<-gsub("-mean()", "Mean", names(extractedData), ignore.case = TRUE)
names(extractedData)<-gsub("-std()", "STD", names(extractedData), ignore.case = TRUE)
names(extractedData)<-gsub("-freq()", "Frequency", names(extractedData), ignore.case = TRUE)
names(extractedData)<-gsub("angle", "Angle", names(extractedData))
names(extractedData)<-gsub("gravity", "Gravity", names(extractedData))
names(extractedData)
#Part 5 - From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject
extractedData$Subject <- as.factor(extractedData$Subject)
extractedData <- data.table(extractedData)
tidyData <- aggregate(. ~Subject + Activity, extractedData, mean)
tidyData <- tidyData[order(tidyData$Subject,tidyData$Activity),]
write.table(tidyData, file = "Tidy.txt", row.names = FALSE)
View(extractedData)
View(activity)
View(activityLabels)
View(activityTest)
View(activityTest)
View(activityTrain)
View(completeData)
View(completeData)
View(extractedData)
View(featureNames)
View(features)
View(featuresTest)
View(featuresTest)
View(subject)
View(subjectTest)
View(subjectTrain)
View(tidyData)
View(tidyData)
